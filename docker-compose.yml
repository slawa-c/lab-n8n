version: '3'

services:
  traefik:
    container_name: traefik
    image: "traefik:v3.3.5"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    # profiles: ["core", "all"]
    # healthcheck:
    #   test: "traefik healthcheck --ping"
    command: # CLI arguments
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # Traefik API
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      # Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      # Entry points
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.traefik.address=:8282
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.http.tls=true
      # - --entrypoints.websecure.http.tls.options=tls-opts@file
      # - --entrypoints.websecure-internal.http.tls=true
      # - --entrypoints.websecure-internal.http.tls.options=tls-opts@file
      # Add route53 as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=route53resolver
      # - --entrypoints.websecure-internal.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      # - --entrypoints.websecure-internal.http.tls.domains[0].main=$DOMAINNAME_1
      # - --entrypoints.websecure-internal.http.tls.domains[0].sans=*.$DOMAINNAME_1
      # - '--entrypoints.dashboard.address=:8082'
      # Let's Encrypt
      - "--certificatesresolvers.route53resolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.route53resolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.route53resolver.acme.dnschallenge=true"
      - "--certificatesresolvers.route53resolver.acme.dnschallenge.provider=route53"
      - "--certificatesresolvers.route53resolver.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53" # fix DNS-01 challenge issue with AWS Route53
      - "--certificatesResolvers.route53resolver.acme.dnsChallenge.propagation.delaybeforechecks=120" # To delay DNS check and reduce LE hitrate
      # logging
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599

      
    ports:
      - "443:443"
      - "80:80"
      - "8282:8282"
    volumes:
      - ${DATA_FOLDER}/letsencrypt:/letsencrypt
      - ${DATA_FOLDER}/traefik3/logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # - TZ=$TZ
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - ACME_EMAIL=${ACME_EMAIL}
    labels:
      #___ core configs
      - traefik.enable=true
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.tls=true"
      # - "traefik.http.routers.traefik.tls.certresolver=route53resolver"
      #___ Ping is open to the world to let third party monitor traefik availability / healthcheck) (without basicauth)
      # - "traefik.http.routers.ping.rule=Host(`ping.${DOMAIN_NAME}`)"
      # - "traefik.http.routers.ping.service=ping@internal"
      # - "traefik.http.routers.ping.tls.certresolver=route53resolver"
      # - "traefik.http.routers.ping.tls=true"
      #___ use these middlewares
      # - "traefik.http.routers.traefik.middlewares=auth_all,traefik-strip"
      - "traefik.http.routers.traefik.middlewares=RuleGrpMain"
      #___ specific middleware for traefik (it enables the traefik at mydomain.com/traefik)
      # - "traefik.http.middlewares.traefik-strip.stripprefix.prefixes=/traefik"

      # Middleware GROUPS
      # ========================================================
        #___ RuleGrpMain (follow bug: https://github.com/containous/traefik/issues/5890)
      - "traefik.http.middlewares.RuleGrpMain.chain.middlewares=compress_all,ratelimit_all,retry_all,header_all"
        #___ RuleGrpSlash
      # - "traefik.http.middlewares.RuleGrpSlash.chain.middlewares=slash_step1,slash_step2"

      # Middlewares RULES
      # ========================================================
      # auth_all (useful for all dashboards)
      # - "traefik.http.middlewares.auth_all.basicauth.usersfile=/users_credentials"
      # compress_all
      - "traefik.http.middlewares.compress_all.compress=true"
      # ratelimit_all
      - "traefik.http.middlewares.ratelimit_all.ratelimit.average=100"
      - "traefik.http.middlewares.ratelimit_all.ratelimit.burst=10"
      # retry_all
      - "traefik.http.middlewares.retry_all.retry.attempts=5"
      # error_all
      - "traefik.http.middlewares.error_all.errors.status=400-599"
      - "traefik.http.middlewares.error_all.errors.service=serviceError"
      - "traefik.http.middlewares.error_all.errors.query=/{status}.html"
      # slash_step1 + slash_step2 | Add missing trailing slash
      # - "traefik.http.middlewares.slash_step1.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
      # - "traefik.http.middlewares.slash_step1.redirectregex.replacement=$${1}/"
      # - "traefik.http.middlewares.slash_step1.redirectregex.permanent=true"
      # - "traefik.http.middlewares.slash_step2.stripprefixregex.regex=/[a-z0-9_]+"
      # header_all
      - "traefik.http.middlewares.header_all.headers.browserXssFilter=true"
      - "traefik.http.middlewares.header_all.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.header_all.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.header_all.headers.framedeny=true"
      - "traefik.http.middlewares.header_all.headers.sslredirect=true"
      - "traefik.http.middlewares.header_all.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.header_all.headers.stsPreload=true"
      - "traefik.http.middlewares.header_all.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.header_all.headers.featurePolicy=accelerometer 'none'; ambient-light-sensor 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; usb 'none'; midi 'none'; sync-xhr 'none'; vr 'none'"
      - "traefik.http.middlewares.header_all.headers.contentSecurityPolicy=default-src https:"
      - "traefik.http.middlewares.header_all.headers.referrerPolicy=strict-origin-when-cross-origin"
      # Docker swarm need a dummy service for port detection
      - "traefik.http.services.dummy-service.loadbalancer.server.port=59999"


  initContainer:
    image: busybox
    command: ['sh', '-c', 'chown -R 1000:1000 /home/node/.n8n']
    volumes:
      - ${DATA_FOLDER}/.n8n:/home/node/.n8n

  n8n:
    image: docker.n8n.io/n8nio/n8n:1.93.0
    ports:
      - '5678:5678'
    labels:
      - traefik.enable=true
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN_NAME}`)"
      # - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      # - 'traefik.http.routers.n8n.rule=PathPrefix(`/${SUBFOLDER1}`)'
      # - 'traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/${SUBFOLDER1}'
      # - 'traefik.http.routers.n8n.middlewares=n8n-stripprefix'
      # - traefik.http.routers.n8n.tls.certresolver=route53resolver
      # - traefik.http.routers.n8n.tls.domains[0].main=${DOMAIN_NAME}
      # - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      # - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      # - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      # - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      # - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      # - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      # - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      # - traefik.http.middlewares.n8n.headers.STSPreload=true
      #### Apply rules (middlewares)
      # - "traefik.http.routers.n8n.middlewares=RuleGrpMain"
    environment:
      - N8N_HOST=n8n.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_PATH
      - N8N_EDITOR_BASE_URL=https://n8n.${DOMAIN_NAME}
      # - WEBHOOK_URL=https://n8n.${DOMAIN_NAME}
      - WEBHOOK_URL=https://${NGROK_DOMAIN_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_FOLDER}/.n8n:/home/node/.n8n
    depends_on:
      initContainer:
        condition: service_completed_successfully
  
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    # ports:
      # - '3000:8080'
    labels:
      - traefik.enable=true
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"
      # - "traefik.http.routers.openwebui.rule=Host(`${DOMAIN_NAME}`) && (PathPrefix(`/${SUBFOLDER2}`))"
      - "traefik.http.routers.openwebui.rule=Host(`openwebui.${DOMAIN_NAME}`)"
      # - "traefik.http.routers.openwebui.tls=true"
      - "traefik.http.routers.openwebui.entrypoints=websecure"
      # - "traefik.http.routers.openwebui.rule=PathPrefix(`/${SUBFOLDER2}`)"
      # - "traefik.http.middlewares.openwebui-stripprefix.stripprefix.prefixes=/${SUBFOLDER2}"
      # - "traefik.http.routers.openwebui.middlewares=openwebui-stripprefix"
      # - "traefik.http.routers.openwebui.tls.certresolver=route53resolver"
      # - "traefik.http.routers.openwebui.tls.domains[0].main=${DOMAIN_NAME}"
      # - traefik.http.middlewares.openwebui.headers.SSLRedirect=true
      # - traefik.http.middlewares.openwebui.headers.STSSeconds=315360000
      # - traefik.http.middlewares.openwebui.headers.browserXSSFilter=true
      # - traefik.http.middlewares.openwebui.headers.contentTypeNosniff=true
      # - traefik.http.middlewares.openwebui.headers.forceSTSHeader=true
      # - traefik.http.middlewares.openwebui.headers.SSLHost=${DOMAIN_NAME}
      # - traefik.http.middlewares.openwebui.headers.STSIncludeSubdomains=true
      # - traefik.http.middlewares.openwebui.headers.STSPreload=true
      #### Apply rules (middlewares)
      # - "traefik.http.routers.openwebui.middlewares=RuleGrpMain"
    environment:
      # - OPENWEBUI_PATH
      - WEBUI_URL=https://openwebui.${DOMAIN_NAME}
      - WEBHOOK_URL=https://openwebui.${DOMAIN_NAME}/webhook
      - ENABLE_SIGNUP=true
      # - WEBHOOK_URL=https://${DOMAIN_NAME}${OPENWEBUI_PATH}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_FOLDER}/open-webui:/app/backend/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
  litellm:
    build:
      context: .
      args:
        target: runtime
    image: ghcr.io/berriai/litellm:main-stable
    #########################################
    ## Uncomment these lines to start proxy with a config.yaml file ##
    # volumes:
    #  - ./config.yaml:/app/config.yaml <<- this is missing in the docker-compose file currently
    # command:
    #  - "--config=/app/config.yaml"
    ##############################################
    ports:
      - "4000:4000" # Map the container port to the host, change the host port if necessary
    labels:
      - traefik.enable=true
      - "traefik.http.services.litellm.loadbalancer.server.port=4000"
      # - "traefik.http.routers.litellm.rule=Host(`${DOMAIN_NAME}`) && (PathPrefix(`/${SUBFOLDER2}`))"
      - "traefik.http.routers.litellm.rule=Host(`litellm.${DOMAIN_NAME}`)"
      # - "traefik.http.routers.litellm.tls=true"
      - "traefik.http.routers.litellm.entrypoints=websecure"
      # - "traefik.http.routers.litellm.rule=PathPrefix(`/${SUBFOLDER2}`)"
      # - "traefik.http.middlewares.litellm-stripprefix.stripprefix.prefixes=/${SUBFOLDER2}"
      # - "traefik.http.routers.litellm.middlewares=litellm-stripprefix"
      # - "traefik.http.routers.litellm.tls.certresolver=route53resolver"
      # - "traefik.http.routers.litellm.tls.domains[0].main=${DOMAIN_NAME}"
      # - traefik.http.middlewares.litellm.headers.SSLRedirect=true
      # - traefik.http.middlewares.litellm.headers.STSSeconds=315360000
      # - traefik.http.middlewares.litellm.headers.browserXSSFilter=true
      # - traefik.http.middlewares.litellm.headers.contentTypeNosniff=true
      # - traefik.http.middlewares.litellm.headers.forceSTSHeader=true
      # - traefik.http.middlewares.litellm.headers.SSLHost=${DOMAIN_NAME}
      # - traefik.http.middlewares.litellm.headers.STSIncludeSubdomains=true
      # - traefik.http.middlewares.litellm.headers.STSPreload=true
      #### Apply rules (middlewares)
      # - "traefik.http.routers.litellm.middlewares=RuleGrpMain"
    environment:
      DATABASE_URL: "postgresql://${LITELLM_POSTGRES_USER}:${LITELLM_POSTGRES_PASSWORD}@postgresdb:5432/${LITELLM_POSTGRES_DB}"
      STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_FOLDER}/litellm:/app/config.yaml
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    env_file:
      - .env # Load local .env file
    depends_on:
      - postgresdb # Indicates that this service depends on the 'db' service, ensuring 'db' starts first
    # healthcheck: # Defines the health check configuration for the container
    #   test: [
    #       "CMD",
    #       "curl",
    #       "-f",
    #       "http://localhost:4000/health/liveliness || exit 1",
    #     ] # Command to execute for health check
    #   interval: 30s # Perform health check every 30 seconds
    #   timeout: 10s # Health check command times out after 10 seconds
    #   retries: 3 # Retry up to 3 times if health check fails
    #   start_period: 40s # Wait 40 seconds after container start before beginning health checks

  # db:
  #   image: postgres:16
  #   restart: always
  #   container_name: litellm_db
  #   environment:
  #     POSTGRES_DB: ${LITELLM_POSTGRES_DB}
  #     POSTGRES_USER: ${LITELLM_POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${LITELLM_POSTGRES_PASSWORD}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${DATA_FOLDER}/backups/postgres/db:/var/backups
  #     - ${DATA_FOLDER}/postgres_data:/var/lib/postgresql/data # Persists Postgres data across container restarts
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -d ${LITELLM_POSTGRES_DB} -U ${LITELLM_POSTGRES_USER}"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 10
  postgresdb:
    image: postgres:16
    restart: always
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${LITELLM_POSTGRES_DB}:${LITELLM_POSTGRES_USER}:${LITELLM_POSTGRES_PASSWORD},${VECTORADMIN_POSTGRES_DB}:${VECTORADMIN_POSTGRES_USER}:${VECTORADMIN_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_FOLDER}/backups/postgres/postgresdb:/var/backups
      - ${DATA_FOLDER}/init/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - ${DATA_FOLDER}/postgres_dbdata:/var/lib/postgresql/data # Persists Postgres data across container restarts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
  # vector-admin:
  #   container_name: vector-admin
  #   image: vector-admin:latest
  #   build:
  #     context: ../.
  #     dockerfile: ./docker/Dockerfile
  #   volumes:
  #     - "./.env:/app/backend/.env"
  #     - "../backend/storage:/app/backend/storage"
  #     - "../document-processor/hotdir/:/app/document-processor/hotdir"
  #   ports:
  #     - "3001:3001"
  #     - "3355:3355"
  #     - "8288:8288"
  anythingllm:
    image: mintplexlabs/anythingllm
    container_name: anythingllm
    ports:
    - "3001:3001"
    cap_add:
      - SYS_ADMIN
    labels:
      - traefik.enable=true
      - "traefik.http.services.anythingllm.loadbalancer.server.port=3001"
      # - "traefik.http.routers.anythingllm.rule=Host(`${DOMAIN_NAME}`) && (PathPrefix(`/${SUBFOLDER2}`))"
      - "traefik.http.routers.anythingllm.rule=Host(`anythingllm.${DOMAIN_NAME}`)"
      # - "traefik.http.routers.anythingllm.tls=true"
      - "traefik.http.routers.anythingllm.entrypoints=websecure"
      # - "traefik.http.routers.anythingllm.rule=PathPrefix(`/${SUBFOLDER2}`)"
      # - "traefik.http.middlewares.anythingllm-stripprefix.stripprefix.prefixes=/${SUBFOLDER2}"
      # - "traefik.http.routers.anythingllm.middlewares=anythingllm-stripprefix"
      # - "traefik.http.routers.anythingllm.tls.certresolver=route53resolver"
      # - "traefik.http.routers.anythingllm.tls.domains[0].main=${DOMAIN_NAME}"
      # - traefik.http.middlewares.anythingllm.headers.SSLRedirect=true
      # - traefik.http.middlewares.anythingllm.headers.STSSeconds=315360000
      # - traefik.http.middlewares.anythingllm.headers.browserXSSFilter=true
      # - traefik.http.middlewares.anythingllm.headers.contentTypeNosniff=true
      # - traefik.http.middlewares.anythingllm.headers.forceSTSHeader=true
      # - traefik.http.middlewares.anythingllm.headers.SSLHost=${DOMAIN_NAME}
      # - traefik.http.middlewares.anythingllm.headers.STSIncludeSubdomains=true
      # - traefik.http.middlewares.anythingllm.headers.STSPreload=true
      #### Apply rules (middlewares)
      # - "traefik.http.routers.anythingllm.middlewares=RuleGrpMain"
    environment:
    # Adjust for your environment
      - STORAGE_DIR=/app/server/storage
      - JWT_SECRET=${JWT_SECRET}
      - LLM_PROVIDER=ollama
      - OLLAMA_BASE_PATH=http://host.docker.internal:11434
      - OLLAMA_MODEL_PREF=llama2
      - OLLAMA_MODEL_TOKEN_LIMIT=8192
      - EMBEDDING_ENGINE=ollama
      - EMBEDDING_BASE_PATH=http://host.docker.internal:11434
      - EMBEDDING_MODEL_PREF=nomic-embed-text:latest
      - EMBEDDING_MODEL_MAX_CHUNK_LENGTH=8192
      - VECTOR_DB=lancedb
      - WHISPER_PROVIDER=local
      - TTS_PROVIDER=native
      - PASSWORDMINCHAR=8
      - COMMUNITY_HUB_BUNDLE_DOWNLOADS_ENABLED="1"
      # Add any other keys here for services or settings
      # you can find in the docker/.env.example file
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_FOLDER}/anythingllm_storage:/app/server/storage
    restart: always

volumes:
  # prometheus_data:
  #   driver: local
  postgres_data:
    name: litellm_postgres_data # Named volume for Postgres data persistence
  postgres_dbdata:
    name: postgres_app_data # Named volume for Postgres application data
  anythingllm_storage:
    name: anythingllm_storage # Named volume for AnythingLLM storage
    # driver: local
